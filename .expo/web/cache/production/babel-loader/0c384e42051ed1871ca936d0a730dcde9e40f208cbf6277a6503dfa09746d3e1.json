{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{supabase}from'../lib/supabase';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=createContext(undefined);export function AuthProvider({children}){const[user,setUser]=useState(null);const[profile,setProfile]=useState(null);const[session,setSession]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{supabase.auth.getSession().then(({data:{session}})=>{setSession(session);setUser(session?.user??null);if(session?.user){loadProfile(session.user.id);}setLoading(false);});const{data:{subscription}}=supabase.auth.onAuthStateChange(async(event,session)=>{setSession(session);setUser(session?.user??null);if(event==='SIGNED_IN'&&session?.user){await loadProfile(session.user.id);}else if(event==='SIGNED_OUT'){setProfile(null);}setLoading(false);});return()=>subscription.unsubscribe();},[]);const loadProfile=async userId=>{try{const{data,error}=await supabase.from('profiles').select('*').eq('id',userId).single();if(error&&error.code!=='PGRST116'){console.error('Error loading profile:',error);return;}if(data){setProfile(data);}else{const newProfile={id:userId,first_name:user?.user_metadata?.first_name||null,last_name:user?.user_metadata?.last_name||null,display_name:null,avatar_url:null,phone:null,subscription_status:'free'};const{data:createdProfile,error:createError}=await supabase.from('profiles').insert(newProfile).select().single();if(createError){console.error('Error creating profile:',createError);}else{setProfile(createdProfile);}}}catch(error){console.error('Error in loadProfile:',error);}};const signUp=async(email,password,metadata)=>{const{data,error}=await supabase.auth.signUp({email,password,options:{data:metadata}});return{data,error};};const signIn=async(email,password)=>{const{data,error}=await supabase.auth.signInWithPassword({email,password});return{data,error};};const signOut=async()=>{const{error}=await supabase.auth.signOut();if(error)throw error;};const updateProfile=async updates=>{if(!user)throw new Error('No user logged in');const{error}=await supabase.from('profiles').update(updates).eq('id',user.id);if(error)throw error;setProfile(prev=>prev?Object.assign({},prev,updates):null);};const value={user,profile,session,loading,signUp,signIn,signOut,updateProfile};return _jsx(AuthContext.Provider,{value:value,children:children});}export function useAuth(){const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;}","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsx","_jsx","AuthContext","undefined","AuthProvider","children","user","setUser","profile","setProfile","session","setSession","loading","setLoading","auth","getSession","then","data","loadProfile","id","subscription","onAuthStateChange","event","unsubscribe","userId","error","from","select","eq","single","code","console","newProfile","first_name","user_metadata","last_name","display_name","avatar_url","phone","subscription_status","createdProfile","createError","insert","signUp","email","password","metadata","options","signIn","signInWithPassword","signOut","updateProfile","updates","Error","update","prev","Object","assign","value","Provider","useAuth","context"],"sources":["/Users/siva/Documents/GitHub/streakzilla/streakzilla/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { User, Session } from '@supabase/supabase-js';\nimport { supabase } from '../lib/supabase';\nimport { Database } from '../lib/database.types';\n\ntype Profile = Database['public']['Tables']['profiles']['Row'];\n\ninterface AuthContextType {\n  user: User | null;\n  profile: Profile | null;\n  session: Session | null;\n  loading: boolean;\n  signUp: (email: string, password: string, metadata?: { first_name?: string; last_name?: string }) => Promise<any>;\n  signIn: (email: string, password: string) => Promise<any>;\n  signOut: () => Promise<void>;\n  updateProfile: (updates: Partial<Profile>) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [profile, setProfile] = useState<Profile | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session);\n      setUser(session?.user ?? null);\n      if (session?.user) {\n        loadProfile(session.user.id);\n      }\n      setLoading(false);\n    });\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setSession(session);\n      setUser(session?.user ?? null);\n      \n      if (event === 'SIGNED_IN' && session?.user) {\n        await loadProfile(session.user.id);\n      } else if (event === 'SIGNED_OUT') {\n        setProfile(null);\n      }\n      \n      setLoading(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const loadProfile = async (userId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        console.error('Error loading profile:', error);\n        return;\n      }\n\n      if (data) {\n        setProfile(data);\n      } else {\n        // Create profile if it doesn't exist\n        const newProfile = {\n          id: userId,\n          first_name: user?.user_metadata?.first_name || null,\n          last_name: user?.user_metadata?.last_name || null,\n          display_name: null,\n          avatar_url: null,\n          phone: null,\n          subscription_status: 'free',\n        };\n\n        const { data: createdProfile, error: createError } = await supabase\n          .from('profiles')\n          .insert(newProfile)\n          .select()\n          .single();\n\n        if (createError) {\n          console.error('Error creating profile:', createError);\n        } else {\n          setProfile(createdProfile);\n        }\n      }\n    } catch (error) {\n      console.error('Error in loadProfile:', error);\n    }\n  };\n\n  const signUp = async (email: string, password: string, metadata?: { first_name?: string; last_name?: string }) => {\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: metadata,\n      },\n    });\n    return { data, error };\n  };\n\n  const signIn = async (email: string, password: string) => {\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n    return { data, error };\n  };\n\n  const signOut = async () => {\n    const { error } = await supabase.auth.signOut();\n    if (error) throw error;\n  };\n\n  const updateProfile = async (updates: Partial<Profile>) => {\n    if (!user) throw new Error('No user logged in');\n\n    const { error } = await supabase\n      .from('profiles')\n      .update(updates)\n      .eq('id', user.id);\n\n    if (error) throw error;\n\n    setProfile(prev => prev ? { ...prev, ...updates } : null);\n  };\n\n  const value = {\n    user,\n    profile,\n    session,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n    updateProfile,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}